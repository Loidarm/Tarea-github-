Respuesta del ejercicio 1
Ejercicio Básico: Suma de Números
Crea un nuevo archivo llamado suma.plen el directorio raíz de tu repositorio:
% Predicado para sumar dos números
suma(X, Y, Z) :- Z is X + Y.

% Predicados de prueba
prueba_suma :-
 suma(5, 3, Resultado),
 write('5 + 3 = '), write(Resultado),
 nl.

% Ejecutar la prueba
:- prueba_suma.


Respuesta del ejercicio 2
Ejercicio Intermedio: Manipulación de Listas
Crea un nuevo archivo llamado invertir.plen el directorio raíz:

% Predicado para invertir una lista
invertir([], []).
           invertir([Cabeza|Cola], ListaInvertida) :-
           invertir(Cola, ListaAuxiliar),     
           append(ListaAuxiliar, [Cabeza], ListaInvertida).

          % Predicados de prueba
              prueba_invertir :-
              invertir([1, 2, 3, 4, 5], ListaResultado),
              write('Lista original: [1, 2, 3, 4, 5]'),
          nl,
          write('Lista invertida: '), write(ListaResultado),
          nl.

         % Ejecutar la prueba
          :- prueba_invertir.

Respuesta del ejercicio 3
Crea un nuevo archivo llamado arbol.plen el directorio raíz:
% Definición de un árbol binario
% arbol(Valor, HijoIzquierdo, HijoDerecho)
% Insertar un valor en el árbol
insertar(Valor, nil, arbol(Valor, nil, nil)).

insertar(Valor, arbol(Raiz, Izq, Der), arbol(Raiz, NuevoIzq, Der)) :-
 Valor < Raiz,
 insertar(Valor, Izq, NuevoIzq).

insertar(Valor, arbol(Raiz, Izq, Der), arbol(Raiz, Izq, NuevoDer)) :-
 Valor > Raiz,
 insertar(Valor, Der, NuevoDer).

% Buscar un valor en el árbol
buscar(Valor, arbol(Valor, _, _)).

buscar(Valor, arbol(Raiz, Izq, _)) :-
 Valor < Raiz,
 buscar(Valor, Izq).

buscar(Valor, arbol(Raiz, _, Der)) :-
 Valor > Raiz,
 buscar(Valor, Der).

% Predicados de prueba
prueba_arbol :-
 insertar(5, nil, Arbol1),
 insertar(3, Arbol1, Arbol2),
 insertar(7, Arbol2, Arbol3),
 insertar(1, Arbol3, Arbol4),
 insertar(4, Arbol4, Arbol5),

 write('Árbol construido'),
 nl,

 (buscar(3, Arbol5) -> 
 write('Valor 3 encontrado')
 ;
 write('Valor 3 no encontrado')
 ),
 nl,

 (buscar(6, Arbol5) -> 
 write('Valor 6 encontrado')
 ; 
 write('Valor 6 no encontrado')
 ),
 nl.
Ejecutar la prueba
:- prueba_arbol.

Después de implementar cada ejercicio, hay que confirmar los cambios y enviarselos a las ramas correspondientes :

git add .
git commit -m "Implement Prolog exercises"
git push origin master
git checkout exercise-basico
# Repeat for other branches
git checkout master
git merge exercise-basico

